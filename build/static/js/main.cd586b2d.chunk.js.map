{"version":3,"sources":["../node_modules/tableschema/lib/profiles sync /^/.//.*/.json$","hooks/useDatasetLoader.js","Widget.js","serviceWorker.js","index.js"],"names":["map","./geojson.json","./table-schema.json","./topojson.json","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","Dataset","require","toArray","useDatasetLoader","identifiersOrResources","_useState","useState","_useState2","slicedToArray","currentDatasets","addDataset","config","window","useEffect","datasets","forEach","_ref","asyncToGenerator","regenerator_default","a","mark","_callee2","identifier","dataset","newDatasets","wrap","_context2","prev","next","some","original","load","sent","Promise","all","resources","_ref2","_callee","resource","rowStream","_context","rows","keyed","descriptor","_values","stop","this","_x2","apply","arguments","Array","isArray","concat","push","abrupt","_x","Widget","props","find","name","widget","view","datasetId","compiledView","dprender","vegaSpec","react_default","createElement","react_vega_min_default","spec","Boolean","location","hostname","match","widgets","ReactDOM","render","src_Widget","document","getElementById","elementId","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd586b2d.chunk.js","sourcesContent":["var map = {\n\t\"./geojson.json\": 192,\n\t\"./table-schema.json\": 462,\n\t\"./topojson.json\": 193\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 461;","import React, { useState, useEffect } from 'react';\nconst {Dataset} = require('data.js');\nconst toArray = require('stream-to-array')\n\n\nfunction useDatasetLoader(identifiersOrResources) {\n  const [currentDatasets, addDataset] = useState([])\n  const config = window.config\n\n  useEffect(() => {\n    // Load datasets:\n    config.datasets.forEach(async identifier => {\n      // Check if this dataset is already loaded:\n      if (!currentDatasets.some(dataset => dataset.identifier.original === identifier)) {\n        // Load the dataset:\n        const dataset = await Dataset.load(identifier)\n        // Load/compile resources:\n        await Promise.all(dataset.resources.map(async resource => {\n          // Load it here\n          const rowStream = await resource.rows({keyed: true})\n          resource.descriptor._values = await toArray(rowStream)\n        }))\n        // Create a new list of datasets by including a new one:\n        const newDatasets = []\n        if (Array.isArray(currentDatasets)) {\n          newDatasets.concat(currentDatasets)\n          newDatasets.push(dataset)\n        }\n        addDataset(newDatasets)\n        return currentDatasets\n      }\n    })\n  })\n\n  return currentDatasets\n}\n\nexport default useDatasetLoader;\n","import React from 'react';\nimport Vega from 'react-vega';\nimport * as dprender from 'datapackage-render'\n\nimport useDatasetLoader from './hooks/useDatasetLoader';\nimport './Widget.css';\n\n\nfunction Widget(props) {\n  const datasets = useDatasetLoader()\n  const dataset = datasets.find(dataset => dataset.descriptor.name === props.widget.view.resources[0].datasetId)\n  if (dataset) {\n    let compiledView = dprender.compileView(props.widget.view, dataset.descriptor)\n    let vegaSpec = dprender.vegaToVega(compiledView)\n    if (vegaSpec) {\n      return (\n        <Vega spec={vegaSpec} />\n      )\n    }\n  }\n  return (\n    <div>'Loading...'</div>\n  )\n}\n\nexport default Widget;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Widget from './Widget';\nimport * as serviceWorker from './serviceWorker';\n\n// Read 'config' from global variable:\nconst config = window.config\n\nif (config) {\n  // Render widgets:\n  config.widgets.forEach(widget => {\n    ReactDOM.render(<Widget widget={widget} />, document.getElementById(widget.elementId));\n  })\n} else {\n  ReactDOM.render(\n    <div>'Missing \"config\" global variable. Please, refer to README.'</div>,\n    document.getElementById('root')\n  );\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}